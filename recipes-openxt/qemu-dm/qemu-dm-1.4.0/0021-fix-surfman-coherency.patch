diff --git a/hw/xen.h b/hw/xen.h
index def2dfe..5c610c1 100644
--- a/hw/xen.h
+++ b/hw/xen.h
@@ -67,6 +67,7 @@ void xen_modified_memory(ram_addr_t start, ram_addr_t length);
 struct MemoryRegion;
 void xen_register_framebuffer(struct MemoryRegion *mr);
 struct MemoryRegion *xen_get_framebuffer(void);
+void * xen_get_framebuffer_ptr(void);
 
 #if defined(CONFIG_XEN) && CONFIG_XEN_CTRL_INTERFACE_VERSION < 400
 #  define HVM_MAX_VCPUS 32
diff --git a/ui/surfman.c b/ui/surfman.c
index 246c645..57e9a03 100644
--- a/ui/surfman.c
+++ b/ui/surfman.c
@@ -165,7 +165,7 @@ void surfman_display_init(DisplayState *ds)
         surfman_error("Could not recover VRAM MemoryRegion.");
         goto err_vram;
     }
-    ss->vram_ptr = memory_region_get_ram_ptr(ss->vram);
+    ss->vram_ptr = xen_get_framebuffer_ptr();
     ss->dmbus_service = dmbus_service_connect(DMBUS_SERVICE_SURFMAN, DEVICE_TYPE_VESA, &surfman_dmbus_ops, ss);
     if (!ss->dmbus_service) {
         surfman_error("Could not initialize dmbus.");
diff --git a/xen-all.c b/xen-all.c
index aa7e579..5f97994 100644
--- a/xen-all.c
+++ b/xen-all.c
@@ -38,6 +38,7 @@
 
 static MemoryRegion ram_memory, ram_640k, ram_lo, ram_hi;
 static MemoryRegion *framebuffer;
+static void * framebuffer_mapped;
 static bool xen_in_migration;
 static unsigned int serverid;
 static uint32_t xen_dmid = ~0;
@@ -1452,9 +1453,53 @@ void destroy_hvm_domain(bool reboot)
     }
 }
 
+
+/**
+ * Creates the internal framebuffer mapping used when QEMU internal
+ * components (e.g. the Surfman UI). This mapping is then used to get
+ * internal framebfufer pointers (in lieu of memory_region_get_ram_ptr),
+ * ensuring that our memory is mapped in a way that assures cache coherency.
+ */
+static void __xen_create_framebuffer_mapping(void)
+{
+    size_t number_of_pfns_to_map;
+    xen_pfn_t * pfns_to_map;
+    hwaddr vram_gmfn;
+    int i;
+
+
+    //Get the GMFN (guest machine frame) that contains the  framebuffer.
+    vram_gmfn = memory_region_get_ram_addr(framebuffer) >> TARGET_PAGE_BITS;
+
+
+    //Determine the total number of page frames used to store the framebuffer.
+    number_of_pfns_to_map = int128_get64(framebuffer->size) >> TARGET_PAGE_BITS;
+
+    //Build a list of guest page frames that will contain the framebuffer--
+    //we'll use this list to map the framebuffer into our memory space.
+    pfns_to_map = malloc(sizeof(*pfns_to_map) * number_of_pfns_to_map);
+    for(i = 0; i < number_of_pfns_to_map; ++i) {
+      pfns_to_map[i] =  vram_gmfn + i;
+    }
+
+
+    //Ask the hypervisor to perform the actual mapping, ensuring that we map
+    //the memory with write-combine caching. This ensures that any changes we
+    //make to the framebuffer are "immediately" applied to the VRAM, rather than
+    //sitting in a CPU cache.
+    framebuffer_mapped = xc_map_foreign_batch_cacheattr(xen_xc, xen_domid,
+                                                        PROT_READ | PROT_WRITE,
+                                                        pfns_to_map,
+                                                        number_of_pfns_to_map,
+                                                        XC_MAP_CACHEATTR_WC);
+
+    free(pfns_to_map);
+}
+
 void xen_register_framebuffer(MemoryRegion *mr)
 {
     framebuffer = mr;
+    __xen_create_framebuffer_mapping();
 }
 
 /* HACK: Get the framebuffer MemoryRegion to setup Surfman's plugins. */
@@ -1463,6 +1508,20 @@ MemoryRegion *xen_get_framebuffer(void)
     return framebuffer;
 }
 
+/**
+ * Return a pointer to the Xen framebuffer.
+ *
+ * This function should be used when the guest framebuffer needs to be modified by QEMU
+ * (e.g. when rendering glyphs in text-mode), rather than memory_region_get_ram_ptr, as
+ * we need to ensure that the VRAM memory has been mapped with the correct cache attributes.
+ *
+ * @return A QEMU-accessible pointer to the Xen guest's framebuffer.
+ */
+void * xen_get_framebuffer_ptr(void)
+{
+    return framebuffer_mapped;
+}
+
 void xen_shutdown_fatal_error(const char *fmt, ...)
 {
     va_list ap;
